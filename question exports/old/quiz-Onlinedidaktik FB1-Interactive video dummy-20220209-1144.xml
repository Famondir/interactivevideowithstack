<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 7466409  -->
  <question type="stack">
    <name>
      <text>Interactive video dummy</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<script src="https://www.rub.de/ak-mathe-digital/stackselbstlern.js"></script>

<script type="text/javascript">
	function getState () {
		if (anzahl < list.length-1) {
			console.log("#-----# Aktueller Aufgabenstatus #-----#");
			console.log("Sichtbare prt-Feedbackfelder: ", anzahl);
			console.log("MaxTime: ", maxtime);
			console.log("Aktuelle Aufgabe: ", aktuelleAufgabe);
			console.log("aktuelle Aufgabe sichtbar?: ", (document.getElementById(aktuelleAufgabe).style.display != 'none'));
			console.log("Anzahl richtig gelöster Aufgaben: ", anzahlRichtig);
			console.log("Aktuelle Videozeit: ", video.currentTime);
			console.log("");
		} else {
			console.log("no further questions to state\n");
		}
	}

	function playNext(start = 0, end = 5) {
		video.currentTime = start;
		maxtime = end;
		video.play();
	}
	
	function playCurrent() {
		if (anzahlRichtig > 0) {
			video.currentTime = list[anzahlRichtig-1][1];
		} else {
			video.currentTime = 0;
		}
		
		maxtime = list[anzahlRichtig][1];
		video.play();
	}

	function stateQuestion(event) {
		if (video.currentTime >= maxtime) {
			video.pause();
			getState();
			if (anzahl < list.length-1) {
				show(list[anzahlRichtig][0]);
			}
		}
	}
	
	// Chapter markers
	// Quellen: https://codepen.io/nickwanhere/pen/gOMderr und https://codepen.io/team/rcrooks1969/pen/LJBdPJ
	function addMarkers() {
		
		// var playheadWell = document.getElementsByClassName("vjs-progress-control vjs-control")[0].children[0];
		
		// if we are not waiting for .vjs-progress-holder in addition to loadedmetadata we might not find the right element
		waitForElm('.vjs-progress-holder').then((playheadWell) => {
			// console.log('Element is ready');
			// console.log(playheadWell.textContent);
			
			var videoDuration = video.duration;

			// console.log(playheadWell);
			// console.log(videoDuration);
			// console.log("fügt Marker hinzu");

			// Loop over each cue point, dynamically create a div for each
			// then place in div progress bar
			for (i = 0; i < list.length-1; i++) {
				var elem = document.createElement("div");
				elem.className = "vjs-marker";
				elem.id = "cp" + i;
				elem.style.left = list[i][1]/videoDuration*100 + "%";
				elem.dataset.time = list[i][1];
				// console.log("time:", list[i][1]);
				// console.log("elem.style.left", elem.style.left);
				
				var elemSpan = document.createElement("span");
				elemSpan.textContent = list[i][2];
				elem.appendChild(elemSpan);
				
				elem.onclick = function () {
					video.currentTime = this.dataset.time;
				};
				
				playheadWell.appendChild(elem);
			}
		});
			
	}
		
		// Quelle: https://stackoverflow.com/a/61511955/14406173
		function waitForElm(selector) {
			return new Promise(resolve => {
				if (document.querySelector(selector)) {
					return resolve(document.querySelector(selector));
				}

				const observer = new MutationObserver(mutations => {
					if (document.querySelector(selector)) {
						resolve(document.querySelector(selector));
						observer.disconnect();
					}
				});

				observer.observe(document.body, {
					childList: true,
					subtree: true
				});
			});
		}
</script>

<script type="text/javascript">
	function setval(varval) {
		maxtime = maxtime + varval;
		// alert(maxtime);
		play();
	}

	function play() {
		video.play;
	}

	function stop() {
		video.pause();
	}

	function mute() {
		video.volume = 0;
	}

	function unmute() {
		video.volume = 1;
	}
</script>

/* Video einbinden */
<div id="videos">
    <video id="video1" class="video-js vjs-default-skin" controls="" width="640" data-setup='{ "playbackRates": [0.75, 0.9, 1, 1.1, 1.25, 1.5], "width": 640 }'>
    <source src="https://mediathek.htw-berlin.de/getMedium/Default/531c43cd4e70b7ead9d6b01118ae26a7.mp4" type="video/mp4">
	<track kind="chapters" src="@@PLUGINFILE@@/dummyvideo.vtt" srclang="en"  label="English" default>
	</video>
</div>

/* externe Videokontrollelemente */
<div class="videocontrols">
<button onclick="playCurrent();" class="btn btn-primary" type="button">Spiele aktuellen Abschnitt</button>
    <button onclick="playNext();" class="btn btn-primary" type="button">Play</button>
    <button onclick="stop();" class="btn btn-danger" type="button">Pause</button>
    <button onclick="mute();" class="btn btn-danger" type="button">Mute</button>
    <button onclick="unmute();" class="btn btn-danger" type="button">Unmute</button>
    <div class="slidecontainer">
        <input type="range" min="0" max="100" value="100" class="slider" id="myRange">
    </div>
	<button onclick="setval(5);" class="btn btn-danger" type="button">+5</button>
</div>

/* Anzeige aktueller Aufgabe */
<div id="targetcard" class="card">

</div>

/* Aufgabensammlung */
<div id="aufgabensammlung" class="card">
    <div class="card-body" id="a1" style="display: none;">
        <h5 class="card-title">Aufgabe 1</h5>
        <p class="card-text">Was ergibt \({@v1@}+{@v2@}\)?</p>
        <p class="card-text">[[input:ans1]] [[validation:ans1]]</p>
		<p class="card-text">[[feedback:prt1]]</p>
    </div>
	<div class="card-body" id="a2" style="display: none;">
        <h5 class="card-title">Aufgabe 2</h5>
        <p class="card-text">Was ergibt \({@v1@}+{@v2@}\)?</p>
        <p class="card-text">[[input:ans2]] [[validation:ans2]]</p>
		<p class="card-text">[[feedback:prt2]]</p>
    </div>
	<div class="card-body" id="a3" style="display: none;">
        <h5 class="card-title">Aufgabe 3</h5>
        <p class="card-text">Was ergibt \({@v1@}+{@v2@}\)?</p>
        <p class="card-text">[[input:ans3]] [[validation:ans3]]</p>
		<p class="card-text">[[feedback:prt3]]</p>
    </div>
</div>

<script type="text/javascript">


    var video = document.getElementsByTagName("video")[0];
    var maxtime = 0;
	var list = null;
	var prtList = null;
	var anzahl = 0;
	var anzahlRichtig = 0;
	var aktuelleAufgabe = "";

    var slider = document.getElementById("myRange");

    // Update the current slider value (each time you drag the slider handle)
    slider.oninput = function() {
        video.volume = this.value / 100;
    }

    const parent = document.getElementById('targetcard');

    document.addEventListener("DOMContentLoaded", function(event) {
		// Check-Button verschieben
        const checkButton = document.querySelector('.im-controls');
		checkButton.style.textAlign = "center";
        checkButton.style.marginBottom = ".5em";
        parent.insertAdjacentElement('beforeEnd', checkButton);

		// Aufgabenstatus updaten
		prtList = document.getElementsByClassName("stackprtfeedback");
		anzahl = prtList.length;
		list = {#list#};
		// console.log(list);
		list.push(["none",video.duration]);
		//console.log(list);
		
		anzahlRichtig = 0;
		for (let i = 0; i < anzahl; i++) {
			//  console.log(prtList[i].children[0].className=="correct");
			if (prtList[i].children[0].className=="correct") {
				anzahlRichtig+=1;
			}
			
			document.getElementById(list[i][0]).style.display = "block";
		}
		
		aktuelleAufgabe = list[anzahlRichtig][0];
		maxtime = list[anzahlRichtig][1];
		
		//document.getElementById(list[anzahl][0]).style.display = "block";	
		
		getState();
		
		// Neueste Aufgabe verschieben
        var currentQuestion = document.getElementById(list[anzahlRichtig][0]);
        if (anzahl < list.length-1) {
			parent.insertAdjacentElement('afterbegin', currentQuestion);
		}		
    });
		

	// video.addEventListener("timeupdate", stateQuestion, false);
	
	// verhindert vorspulen (Quelle: https://stackoverflow.com/a/39754847/14406173)	
	var timeTracking = {
		watchedTime: 0,
		currentTime: 0
	};
				
	var lastUpdated = 'currentTime';

	video.addEventListener('timeupdate', function () {
		if (!video.seeking) {
			if (video.currentTime > timeTracking.watchedTime) {
				timeTracking.watchedTime = video.currentTime;
				lastUpdated = 'watchedTime';
			}
			//tracking time updated  after user rewinds
			else {
				timeTracking.currentTime = video.currentTime;
				lastUpdated = 'currentTime';
			}
		}
		
		stateQuestion();
	});
	
	// prevent user from seeking
	video.addEventListener('seeking', function () {
		// guard against infinite recursion:
		// user seeks, seeking is fired, currentTime is modified, seeking is fired, current time is modified, ....
		// var delta = video.currentTime - timeTracking.watchedTime;
		var delta = video.currentTime - maxtime;
		if (delta > 0) {
			video.pause();
			console.log("Pause");
			//play back from where the user started seeking after rewind or without rewind
			video.currentTime = timeTracking[lastUpdated];
			video.play();
		}
	});
	
	video.onloadedmetadata = function() {
		list[list.length-1] = (["none",video.duration]);
		maxtime = list[anzahlRichtig][1];
		// setzt Videozeit auf letzte Marke
		if (anzahlRichtig > 0) {
			var currTime = list[anzahlRichtig-1][1];
			
			timeTracking["watchedTime"] = currTime;
			timeTracking["currentTime"] = currTime;
			video.currentTime = currTime;
		}
		// Idee: setze Video auf Zeit vor reload (falls man nach dem die Frage gestellt wurde noch gescrollt hat; wenn man denn scrollen darf)
		
		addMarkers(); // manchmal werden die Marker nicht richtig eingefügt. Eiun spezieller Observer hat auch nciht geholfen
		video.play(); // spiele nach erstem Check automatisch weiter
	};

	window.onload = (event) => {
		// console.log('page is fully loaded');
		// document.getElementsByClassName("vjs-big-play-button")[0].style.display = "none";
		// document.getElementsByClassName("vjs-control-bar")[0].style.display = "flex";
	};
</script>]]></text>
<file name="dummyvideo (1).vtt" path="/" encoding="base64">V0VCVlRUDQoNCkNIQVBURVIgMQ0KMDA6MDA6MTAuMDAwIC0tPiAwMDowMDozMC4wMDANCkludHJvDQogDQoNCkNIQVBURVIgMg0KMDA6MDA6MzAuMDAwIC0tPiAwMDowMDo1Ny4wMDANClBob3RvLCBQaG9uZWJvb2ssIFBoZWFzYW50DQogDQoNCkNIQVBURVIgMw0KMDA6MDA6NTcuMDAwIC0tPiAwMDowMTowNS4wMDANCkRydW0gU29sbw0KIA0KDQpDSEFQVEVSIDQNCjAwOjAxOjA1LjAwMCAtLT4gMDA6MDE6MTYuMDAwDQpTb3VuZHMgbGlrZSBhbiBG</file>
<file name="dummyvideo.vtt" path="/" encoding="base64">V0VCVlRUDQoNCkNIQVBURVIgMQ0KMDA6MDA6MTAuMDAwIC0tPiAwMDowMDozMC4wMDANCkludHJvDQogDQoNCkNIQVBURVIgMg0KMDA6MDA6MzAuMDAwIC0tPiAwMDowMDo1Ny4wMDANClBob3RvLCBQaG9uZWJvb2ssIFBoZWFzYW50DQogDQoNCkNIQVBURVIgMw0KMDA6MDA6NTcuMDAwIC0tPiAwMDowMTowNS4wMDANCkRydW0gU29sbw0KIA0KDQpDSEFQVEVSIDQNCjAwOjAxOjA1LjAwMCAtLT4gMDA6MDE6MTYuMDAwDQpTb3VuZHMgbGlrZSBhbiBG</file>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1</defaultgrade>
    <penalty>0.1</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <stackversion>
      <text>2020120600</text>
    </stackversion>
    <questionvariables>
      <text><![CDATA[list: [["a1",5,"Test"],["a2",10,"Langer text hier"],["a3",20,"unnötig"]];

v1: 2;
v2: 7;
tans1: v1+v2;]]></text>
    </questionvariables>
    <specificfeedback format="html">
      <text></text>
    </specificfeedback>
    <questionnote>
      <text></text>
    </questionnote>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="html">
      <text>Richtige Antwort, gut gemacht!</text>
    </prtcorrect>
    <prtpartiallycorrect format="html">
      <text>Ihre Antwort ist teilweise korrekt.</text>
    </prtpartiallycorrect>
    <prtincorrect format="html">
      <text>Falsche Antwort.</text>
    </prtincorrect>
    <multiplicationsign>dot</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <variantsselectionseed></variantsselectionseed>
    <input>
      <name>ans1</name>
      <type>numerical</type>
      <tans>tans1</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options></options>
    </input>
    <input>
      <name>ans2</name>
      <type>numerical</type>
      <tans>tans1</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options></options>
    </input>
    <input>
      <name>ans3</name>
      <type>numerical</type>
      <tans>tans1</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint></syntaxhint>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords></forbidwords>
      <allowwords></allowwords>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>1</showvalidation>
      <options></options>
    </input>
    <prt>
      <name>prt1</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <answertest>AlgEquiv</answertest>
        <sans>ans1</sans>
        <tans>tans1</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1.0000000</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt1-1-T</trueanswernote>
        <truefeedback format="html">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0.0000000</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt1-1-F</falseanswernote>
        <falsefeedback format="html">
          <text></text>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>prt2</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <answertest>AlgEquiv</answertest>
        <sans>ans2</sans>
        <tans>tans1</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1.0000000</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt2-1-T</trueanswernote>
        <truefeedback format="html">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0.0000000</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt2-1-F</falseanswernote>
        <falsefeedback format="html">
          <text></text>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>prt3</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <answertest>AlgEquiv</answertest>
        <sans>ans3</sans>
        <tans>tans1</tans>
        <testoptions></testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1.0000000</truescore>
        <truepenalty></truepenalty>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt3-1-T</trueanswernote>
        <truefeedback format="html">
          <text></text>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0.0000000</falsescore>
        <falsepenalty></falsepenalty>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt3-1-F</falseanswernote>
        <falsefeedback format="html">
          <text></text>
        </falsefeedback>
      </node>
    </prt>
  </question>

</quiz>